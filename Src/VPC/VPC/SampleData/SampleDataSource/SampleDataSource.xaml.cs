//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleDataSource
{
  // To significantly reduce the sample data footprint in your production application, you can set
  // the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleDataSource { }
#else

  public class SampleDataSource : System.ComponentModel.INotifyPropertyChanged
  {
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
      if (PropertyChanged != null)
      {
        PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    public SampleDataSource()
    {
      try
      {
        var resourceUri = new System.Uri("/VPC;component/SampleData/SampleDataSource/SampleDataSource.xaml", System.UriKind.Relative);
        if (System.Windows.Application.GetResourceStream(resourceUri) != null)
        {
          System.Windows.Application.LoadComponent(this, resourceUri);
        }
      }
      catch (System.Exception)
      {
      }
    }

    readonly ItemCollection _Collection = new ItemCollection();

    public ItemCollection Collection => _Collection;
  }

  public class Item : System.ComponentModel.INotifyPropertyChanged
  {
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
      if (PropertyChanged != null)
      {
        PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
    }

    string _Property1 = string.Empty;

    public string Property1
    {
      get => _Property1;

      set
      {
        if (_Property1 != value)
        {
          _Property1 = value;
          OnPropertyChanged("Property1");
        }
      }
    }

    bool _Property2 = false;

    public bool Property2
    {
      get => _Property2;

      set
      {
        if (_Property2 != value)
        {
          _Property2 = value;
          OnPropertyChanged("Property2");
        }
      }
    }
  }

  public class ItemCollection : System.Collections.ObjectModel.ObservableCollection<Item>
  {
  }
#endif
}
